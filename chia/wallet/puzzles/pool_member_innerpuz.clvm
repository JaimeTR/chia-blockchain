(mod (SINGLETON_MOD_HASH SINGLETON_MOD_HASH_HASH TARGET_PUZHASH ESCAPE_MODE_PUZHASH P2_SINGLETON_PUZHASH PUBKEY (singleton_id parent_innerpuz) spend_type my_innerpuzhash my_amount pool_reward_amount pool_reward_height)

  ; TARGET_PUZHASH is commitment to the pool's puzzle hash
  ; ESCAPE_MODE_PUZHASH is the puzzle_hash you'll go to when you iniate the leaving process
  ; P2_SINGLETON_PUZHASH is the puzzlehash for your pay to singleton puzzle
  ; PUBKEY is the farmer pubkey which authorises an escape attempt

  ; spend_type is: 0 for absorbing money, 1 to escape

  ; absorb_coin_id and my_puzhash are only used for absorbtion case

  (include condition_codes.clvm)

  (defun is-in-list (atom items)
    ;; returns 1 iff `atom` is in the list of `items`
    (if items
      (if (= atom (f items))
        1
        (is-in-list atom (r items))
      )
      0
    )
  )

  ;; utility function used by `curry_args`
  (defun fix_curry_args (items core)
    (if items
        (qq (c (q . (unquote (f items))) (unquote (fix_curry_args (r items) core))))
        core
    )
  )

  ; (curry_args sum (list 50 60)) => returns a function that is like (sum 50 60 ...)
  (defun curry_args (func list_of_args) (qq (a (q . (unquote func)) (unquote (fix_curry_args list_of_args (q . 1))))))

  ;; (curry sum 50 60) => returns a function that is like (sum 50 60 ...)
  (defun curry (func . args) (curry_args func args))

  ;; hash a tree with escape values representing already-hashed subtrees
  ;; This optimization can be useful if you know the puzzle hash of a sub-expression.
  ;; You probably actually want to use `curry_and_hash` though.
  (defun sha256tree_esc_list
         (TREE LITERALS)
         (if (l TREE)
             (sha256 2 (sha256tree_esc_list (f TREE) LITERALS) (sha256tree_esc_list (r TREE) LITERALS))
             (if (is-in-list TREE LITERALS)
                 TREE
                 (sha256 1 TREE)
             )
         )
  )

  ;; hash a tree with escape values representing already-hashed subtrees
  ;; This optimization can be useful if you know the tree hash of a sub-expression.
  (defun sha256tree_esc
     (TREE . LITERAL)
     (sha256tree_esc_list TREE LITERAL)
  )

  ;; return the puzzle hash for a cc with the given `genesis-coin-checker-hash` & `inner-puzzle`
  (defun-inline create_fullpuzhash (mod_hash mod_hash_hash genesis_id inner_puzzle_hash)
    (sha256tree_esc (curry mod_hash mod_hash_hash genesis_id inner_puzzle_hash)
                    mod_hash
                    mod_hash_hash
                    inner_puzzle_hash)
  )


  (defconstant GENESIS_CHALLENGE 0xccd5bb71183532bff220ba46c268991a00000000000000000000000000000000)

  (defun remove_zeroes (hex_val)
    (if (= (strlen hex_val) 33)
      (substr hex_val 1 33)
      hex_val
    )
  )

  (defun-inline calculate_pool_reward (pool_reward_height P2_SINGLETON_PUZHASH pool_reward_amount)
    (sha256 (logior GENESIS_CHALLENGE pool_reward_height) P2_SINGLETON_PUZHASH pool_reward_amount)
  )

  (defun absorb_pool_reward (SINGLETON_MOD_HASH SINGLETON_MOD_HASH_HASH singleton_id TARGET_PUZHASH my_innerpuzhash my_amount pool_reward_amount pool_reward_id)
    (list (list CREATE_COIN my_innerpuzhash my_amount) (list ASSERT_MY_PUZZLEHASH (create_fullpuzhash SINGLETON_MOD_HASH SINGLETON_MOD_HASH_HASH singleton_id my_innerpuzhash)) (list ASSERT_MY_AMOUNT my_amount) (list CREATE_COIN TARGET_PUZHASH pool_reward_amount) (list CREATE_PUZZLE_ANNOUNCEMENT pool_reward_id) (list ASSERT_COIN_ANNOUNCEMENT (sha256 pool_reward_id 0x80)))
  )

  ; main

  (if spend_type
    (list (list AGG_SIG_ME PUBKEY 0x00) (list CREATE_COIN ESCAPE_MODE_PUZHASH my_amount) (list ASSERT_MY_AMOUNT my_amount))
    (absorb_pool_reward SINGLETON_MOD_HASH SINGLETON_MOD_HASH_HASH singleton_id TARGET_PUZHASH my_innerpuzhash my_amount pool_reward_amount (calculate_pool_reward pool_reward_height P2_SINGLETON_PUZHASH pool_reward_amount))
  )
)
